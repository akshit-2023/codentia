generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  name          String?
  email         String          @unique
  image         String?
  role          UserRole        @default(USER)
  password      String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  problems      Problem[]
  problemSolved ProblemSolved[]
  submission    Submission[]
  playlists     Playlist[]
}

model Problem {
  id                String              @id @default(uuid())
  title             String
  description       String
  difficulty        Difficulty
  tags              String[]
  userID            String
  examples          Json
  constraints       String
  hints             String?
  editorial         String?
  testcases         Json
  codeSnippet       Json
  referenceSolution Json
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  user              User                @relation(fields: [userID], references: [id], onDelete: Cascade)
  solvedBy          ProblemSolved[]
  submission        Submission[]
  problemsPlaylist  ProblemInPlayList[]
}

model Submission {
  id            String           @id @default(uuid())
  userID        String
  problemID     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  problem       Problem          @relation(fields: [problemID], references: [id], onDelete: Cascade)
  user          User             @relation(fields: [userID], references: [id], onDelete: Cascade)
  testCases     TestCaseResult[]
}

model TestCaseResult {
  id            String     @id @default(uuid())
  submissionID  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        String
  memory        String
  time          String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  submission    Submission @relation(fields: [submissionID], references: [id], onDelete: Cascade)

  @@index([submissionID])
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userID    String
  problemID String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  problem   Problem  @relation(fields: [problemID], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userID], references: [id], onDelete: Cascade)

  @@unique([userID, problemID])
}

model Playlist {
  id          String   @id @default(uuid())
  name        String
  description String?
  userID      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  problems ProblemInPlayList[]

  user User @relation(fields: [userID], references: [id], onDelete: Cascade)

  @@unique([name, userID]) //unique playlist name per user
}

model ProblemInPlayList {
  id         String   @id @default(uuid())
  playlistID String
  problemID  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  playlist Playlist @relation(fields: [playlistID], references: [id], onDelete: Cascade)
  problem  Problem  @relation(fields: [problemID], references: [id], onDelete: Cascade)

  @@unique([playlistID, problemID])
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}
