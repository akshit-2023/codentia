generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  image     String?
  role      UserRole @default(USER)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problems      Problem[]
  submission    Submission[]
  problemSolved ProblemSolved[]
}

model Problem {
  id                String          @id @default(uuid())
  title             String
  description       String
  difficulty        Difficulty
  tags              String[]
  userID            String
  examples          Json
  constraints       String
  hints             String?
  editorial         String?
  testcases         Json
  codeSnippet       Json
  referenceSolution Json
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  user              User            @relation(fields: [userID], references: [id], onDelete: Cascade)
  submission        Submission[]
  solvedBy          ProblemSolved[]
}

model Submission {
  id            String  @id @default(uuid())
  userID        String
  problemID     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String //Accepted or wrong answer
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userID], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemID], references: [id], onDelete: Cascade)

  testCases TestCaseResult[]
}

model TestCaseResult {
  id            String  @id @default(uuid())
  submissionID  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        String
  memory        String
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submission Submission @relation(fields: [submissionID], references: [id], onDelete: Cascade)

  @@index([submissionID])
}

model ProblemSolved {
  id        String @id @default(uuid())
  userID    String
  problemID String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userID], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemID], references: [id], onDelete: Cascade)

  @@unique([userID, problemID])
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}
